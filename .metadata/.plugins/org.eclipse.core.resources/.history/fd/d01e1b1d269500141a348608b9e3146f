package fr.utt.lo02.partie;


import fr.utt.lo02.carte.Tapis;
import fr.utt.lo02.joueur.Joueur;

public class ActionSpeciale {

	private Tapis tapis;
	private Joueur joueur;
	private Partie partie;
	int nbCartesJouees;

	public ActionSpeciale(Partie partie, int JoueurCourant, int nbCartes) {
		this.partie = partie;
		this.tapis = partie.getTapis();
		this.joueur = partie.getJoueur(JoueurCourant);
		this.nbCartesJouees=nbCartes;
	}

	public int appelerBonneMethode() {
		switch (this.tapis.getCarteDuDessus().getValeur()) {
		case 8:
			effectuerAction8();
			break;
		case 10:
			if(this.joueur instance of Humain){
				
			}
			effectuerAction10();
			break;
		case 14:
			effectuerActionA();
			break;
		}
		return this.tapis.getCarteDuDessus().getValeur();
	}


	/**
	 * Méthode permettant dé gérer la pose d'une carte 10. Son effet consisteà enlever du jeu les arte du tapis.
	 */
	private void effectuerAction10() {
		this.partie.getTapis().viderTas();
	}
	
	/**
	 * Méthode permettant de gérer la pose d'un as. Lorsqu'un joueur  A pose un as, il désigne un  joueur B à qui il souhaite faire prendre le tapis.
	 * Si B ne peut pas contrer l'as ( avoir un autre As ou un 2 ), il prend le tapis.
	 * Le jeu reprend à partir du joueur B. Pour réspecter cette ordre on doit modifier le joueurCourant. 
	 * Il faut tenir compte du fonctionnement de la boucle dans Partie.lancerPartie et notamment de l'incrémentation du joueur.
	 * On utilise donc un setter avec le numéro du joueur - la valeur 1 pour être correctement placé. 
	 */
	private void effectuerActionA() {
		
		int choixDuJoueur = this.joueur.choisirUnJoueur(partie.getListeJoueurs());
		this.joueur = this.partie.getJoueur(choixDuJoueur);
		
		if(!this.joueur.peutJouer(this.tapis.getCarteDuDessus())) {
			this.joueur.getMainJoueur().ajouterPlusieursCartes(this.tapis.prendreTapis());
		//	System.out.println("Maintenant " +this.joueur.getNom() + ": " +this.joueur.getMainJoueur().getListeCartes().size() +" cartes en main.\n");
		}
		else {
		//	System.out.println(this.joueur.getNom() + " a contre l'as.\n");
		}
		
		if(joueur.getNumJoueur()==0) this.partie.setJoueurCourant(this.partie.getNbJoueurs()-1);
		else this.partie.setJoueurCourant(joueur.getNumJoueur()-1);
		System.out.println(this.partie.getJoueurCourant());
	}


	/**
	 * Méthode permettant la gestion de la carte 8. Lorsqu'un 8 est posé, le joueur suivant passe son tour.
	 * Si n huit sont posés, les n joueurs suivants passent leur tour.
	 * 
	 * Fonctionnement :
	 * 
	 *		- n 8 sont posés
	 *		- on récupère le nombre n
	 *		- on avance de n joueurs
	 *
	 */
	private void effectuerAction8() {
		
		//System.out.println(this.nbCartesJouees + " carte(s) 8 a(ont) ete posee(s), il faut donc sauter " + this.nbCartesJouees + " joueurs.");
		
		int numCourant = joueur.getNumJoueur();
		//System.out.println("Numero du joueur, avant le saut : " +joueur.getNumJoueur());
		numCourant= (numCourant+this.nbCartesJouees)%this.partie.getNbJoueurs();
		
		this.partie.setJoueurCourant(numCourant);
	}
}
