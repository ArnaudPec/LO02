package fr.utt.lo02.joueur;

import java.util.*;

import fr.utt.lo02.carte.Carte;
import fr.utt.lo02.carte.MainJoueur;
import fr.utt.lo02.carte.TasVisible;


/**
 * @see Joueur
 *
 */
public class Humain extends Joueur {

	public Humain(String nomJoueur, int numJoueur) {
		super(nomJoueur, numJoueur);
	}


	/**
	 * Méthode permettant au joueur humain de choisir les cartes à jouer.
	 * ATTENTION, il faut encore vérifier tous les contrôles : 1 - ajouter une
	 * condition au choix du nombre de carte à jouer pour cela il faut au
	 * préalable vérifier le nombre max de carte de même valeur de sa main ( ex
	 * : 8coeur 8carreau Aspic RoiTrefle = 2) et interdir un choix supérieur à
	 * ce nombre --> NORMALEMENT OK
	 * 
	 * 2 - A la sélection de la première carte d'une série de plusieurs carte,
	 * il faut implémenter une vérification de la main (ex: l'humain souhaite
	 * jouer deux cartes, selon l'exemple du 1 - il ne peut que choisir une
	 * carte de valeur 8, s'il demande l'as il faut lui redemander de choisir
	 * avant de prendreCarte(l'as en question) ---> NORMALEMENT OK
	 * 
	 * @return une liste de carte
	 * 
	 * @see MainJoueur#calculerNbMaxCarteMemeValeur()
	 * @see MainJoueur#calculerNbOccurenceMemeValeur(Carte)
	 * @see MainJoueur#calculerPositionCarteValeur(int)
	 * 
	 */
	public Carte[] choisirCarteAJouer(Carte derniereCarte) {

		System.out.println(this.mainJoueur);
		
		Scanner scanner = new Scanner(System.in);
		Carte[] listeCartes;
		int numCarte = 0;
		int nombreMaxCarteJouable;
		this.mainJoueur.trierCartesJouables(derniereCarte); // on restreint le choix aux cartes jouables


		nombreMaxCarteJouable = this.mainJoueur.calculerNbMaxCarteMemeValeur();
		if (nombreMaxCarteJouable > 3) nombreMaxCarteJouable = 3;

		System.out.println(this.mainJoueur + "Choisissez le nombre de carte à jouer");

		int nb;
		if(scanner.hasNextInt() )
		     number1 = scanner.nextInt(); // if there is another number  
		else 
		     number1 = 0; // nothing added in the input 
		
		while (nb > nombreMaxCarteJouable || nb<1) {
			System.out.println("Erreur : Vous ne pouvez jouer au maximum que " + nombreMaxCarteJouable+ " carte(s)\nChoisissez un nombre inférieur ou égal à " + nombreMaxCarteJouable);
			nb = scanner.nextInt();
		}

		listeCartes = new Carte[nb];

		System.out.println(this.mainJoueur +"\nChoisissez la(les) carte(s) à jouer (pour un groupe, un seul choix) : \n");
		numCarte = scanner.nextInt();

		while (numCarte > this.mainJoueur.getListeCartes().size() || (this.mainJoueur.calculerNbOccurenceMemeValeur(this.mainJoueur.getCarte(numCarte)) != nombreMaxCarteJouable)) {
			System.out.println("Choix incorrect, vous aviez choisi de jouer "+ nb + " carte(s). Recommencez : \n" + this.mainJoueur);
			numCarte = scanner.nextInt();
		}
		
		System.out.println("Choix correct\n");
		
		scanner.close();
		
		int valeur = this.mainJoueur.getCarte(numCarte).getValeur();
		for (int i = 0; i < listeCartes.length; i++) {
			listeCartes[i] = this.mainJoueur.prendreCarte(this.mainJoueur.calculerPositionCarteValeur(valeur));
		}

		System.out.println("Choix : \n");
		for (int i = 0; i < listeCartes.length; i++) {
			System.out.println(listeCartes[i]);
		}
		
		

		this.mainJoueur.fusionner();
		
		return listeCartes;
	}

	/**
	 * Méthode permettant au joueur humain d'échanger ses cartes en début de partie
	 * 
	 * @see MainJoueur#ajouterCarte(Carte)
	 * @see MainJoueur#prendreCarte(int)
	 * 
	 * @see TasVisible#ajouterCarte(Carte)
	 * @see TasVisible#prendreCarte(int)
	 * 
	 */
	public void changerCartes() {

		Scanner scanner = new Scanner(System.in);
		Scanner scanner2 = new Scanner(System.in);
		int numCarteMain, numCarteVis;

		System.out.println(this.mainJoueur);
		System.out.println(this.tasVisible);

		System.out.println("Souhaitez vous echanger une carte ? O/n \n");

		String chaine = scanner.nextLine();
		char c = chaine.charAt(0);

		while (c != 'n') {
			System.out.println(this.mainJoueur);
			System.out.println(this.tasVisible);

			System.out.println("Numéro de la carte à échanger (main) :");
			numCarteMain = scanner2.nextInt();

			while (numCarteMain > 3) {
				System.out
						.println("Erreur. Numéro de la carte à échanger (main) :");
				numCarteMain = scanner2.nextInt();
			}
			System.out
					.println("Numéro de la carte à échanger (cartes visibles) :");
			numCarteVis = scanner2.nextInt();

			while (numCarteVis > 2) {
				System.out
						.println("Erreur. Numéro de la carte à échanger (main) :");
				numCarteVis = scanner2.nextInt();
			}

			this.mainJoueur.ajouterCarte(this.tasVisible
					.prendreCarte(numCarteVis));
			this.tasVisible.ajouterCarte(this.mainJoueur
					.prendreCarte(numCarteMain));

			System.out.println(this.mainJoueur);
			System.out.println(this.tasVisible);

			System.out
					.println("Souhaitez vous echanger une autre carte ? O/n \n");
			chaine = scanner.nextLine();
			c = chaine.charAt(0);
		}
		scanner.close();
		scanner2.close();
	}
	

}


/**OSBOLETE, SERA DEFINITIVEMENT SUPPRIME DANS UN PROCHAIN COMMIT
 * Méthode permettant de choisir les cartes à jouer. ATTENTION, ne gère pas
 * encore les choix du joueur dans le cas où celui ci voudrait jouer 3
 * cartes alors qu'il n'en a que deux de même valeur
 * 
 * @return Une liste de carte
 * 
 */

/*
 * public HashSet<Carte> choisirCarteAJouer(){
 * 
 * HashSet<Carte> listeCartes ; Scanner scanner = new Scanner(System.in);
 * int numCarte; int valCarte; boolean cartesMemeValeur; boolean memeCartes;
 * 
 * System.out.println("Choisissez le nombre de carte à jouer"); int nb =
 * scanner.nextInt();
 * 
 * while (nb>3) {
 * 
 * System.out.println("Erreur : Choisissez un nombre inférieur ou égal à 3");
 * nb = scanner.nextInt();
 * 
 * }
 * 
 * System.out.println(this.mainJoueur+ "\n");
 * 
 * do { listeCartes = new HashSet<Carte>(); cartesMemeValeur = true;
 * memeCartes=false;
 * 
 * for (int i = 0; i < nb; i++) {
 * System.out.println("\nChoisissez la carte " +i + ": \n");
 * numCarte=scanner.nextInt();
 * listeCartes.add(this.mainJoueur.getCarte(numCarte)); }
 * 
 * if(listeCartes.size()!=nb) memeCartes = true;
 * 
 * java.util.Iterator<Carte> it = listeCartes.iterator();
 * 
 * Carte premiereCarte = (Carte) it.next();
 * 
 * while (it.hasNext()) { Carte carte = (Carte) it.next();
 * if(carte.getValeur()!=premiereCarte.getValeur()) cartesMemeValeur =
 * false; }
 * 
 * System.out.println(memeCartes);
 * 
 * } while (!cartesMemeValeur && memeCartes);
 * 
 * 
 * System.out.println("ok");
 * 
 * return listeCartes;
 * 
 * }
 * 
 * }
 */